#!/bin/sh

. ./script/tools

#export PATH=$PATH:/e/dev/mingw64/bin

GCC_VER=4.8.1

DIR_TMP=_build
DIR_TOP=$PWD
DIR_CFG=$PWD/config
DIR_SRC=$PWD/source
DIR_REL=$PWD/release
DIR_BLD=$DIR_REL/mingw
DIR_DEP=$DIR_SRC/_deps # used by config files

JOBS=$NUMBER_OF_PROCESSORS
BITS=32
[[ $BITS == 32 ]] && {
	STIB=64
	ARCH=i686
} || {
	STIB=32
	ARCH=x86_64
}
HOST=${ARCH}-w64-mingw32

# MSYS's make
MAKE=/bin/make

go_patch() {
	[[ ! -z ${PATCH[@]} ]] && {
		local tag=$DIR_SRC/_tags/${PKG}_1.patched
		[[ ! -f $tag ]] && {
			local log=$DIR_SRC/_logs/${PKG}_patch.log
			status $PKG "patching"
			cd $DIR_SRC/$PKG
			for i in ${PATCH[@]}; do
				patch -p0 < $DIR_CFG/$PKG/$i > $log 2>&1 || error "patching error, see $log"
			done
			touch $tag
		}
	}
}

go_configure() {
	local tag=$DIR_SRC/_tags/${PKG}_2.configured
	[[ ! -f $tag ]] && {
		local log=$DIR_SRC/_logs/${PKG}_configure.log
		status $PKG "configuring"
		check_make_enter $DIR_SRC/$PKG/$DIR_TMP
		[[ ! -f ../configure ]] && { cd ..; autoreconf -i > /dev/null 2>&1; cd $DIR_TMP; }
		../configure --help > _${PKG}-help.txt
		CFLAGS=$CFL LDFLAGS=$LFL ../configure --host=$HOST --build=$HOST --target=$HOST ${CFG[@]} > $log 2>&1 || error "configure error, see $log (or _${PKG}-help.txt for help)"
		touch $tag
	}
}

go_build() {
	local tag=$DIR_SRC/_tags/${PKG}_3.builded
	[[ ! -f $tag ]] && {
		local log=$DIR_SRC/_logs/${PKG}_build.log
		status $PKG "building"
		cd $DIR_SRC/$PKG/$DIR_TMP
		$MAKE -j$JOBS > $log 2>&1 || {
			[[ $PKG == "gcc" ]] && { # just try to do it one more time...
				echo " (one more time)"
				$MAKE -j$JOBS > $log 2>&1 || error "make error, see $log"
			} || error "make error, see $log"
		}
		touch $tag
	}
}

go_install() {
	local tag=$DIR_SRC/_tags/${PKG}_4.installed
	[[ ! -f $tag ]] && {
		local log=$DIR_SRC/_logs/${PKG}_install.log
		status $PKG "installing"
		cd $DIR_SRC/$PKG/$DIR_TMP
		$MAKE install-strip > $log 2>&1 || $MAKE install > $log 2>&1 || error "install error, see $log"
		touch $tag
		[[ ! -z $CMD_POST ]] && {
			local tag=$DIR_SRC/_tags/${PKG}_4.post_install
			[[ ! -f $tag ]] && {
				status $PKG "post installing"
				$CMD_POST >> $log 2>&1 || error "CMD_POST error, see $log"
				touch $tag
			}
		}
	}
}


#
# entry point
#
[[ -z $1 ]] && {
	echo "use: ./${0##*/} <build|clean|snapshot>"
	exit 0
}

case $1 in
	snapshot)
		log=${1}.log
		status "taking $1" "..."
		tar cJf ${0##*/}-$1-`date +%Y%m%d`-`date +%H%M%S`.tar.xz ${0##*/} config script > $log 2>&1 || error "taking $1 error, see $log"
		rm -f $log > /dev/null 2>&1
		result "snapshot" "ready"
		exit 0
		;;

	clean)
		status "MinGW" "cleaning..."
		for i in $DIR_CFG/*; do
			[[ -d $DIR_SRC/${i##*_}/$DIR_TMP ]] && { rm -rf $DIR_SRC/${i##*_}/$DIR_TMP > /dev/null 2>&1 || error "$1 error"; }
		done
		[[ -d $DIR_DEP ]] && { rm -rf $DIR_DEP > /dev/null 2>&1 || error "$1 error"; }
		rm -f $DIR_SRC/_tags/*.{configured,builded,installed}
		result "MinGW" "cleaned up"
		exit 0
		;;

	build)
		TIME_START=$(date +%s)

		# prepare dirs.
		[[ ! -d $DIR_SRC ]] && mkdir -p $DIR_SRC
		[[ ! -d $DIR_SRC/_tags ]] && mkdir -p $DIR_SRC/_tags
		[[ ! -d $DIR_SRC/_logs ]] && mkdir -p $DIR_SRC/_logs

		# async. download packages...
		status "downloading:"
		for pkg in $DIR_CFG/*; do
			[[ ! -f $pkg ]] && continue
			PKG=${pkg##*_}
			EXC=

			. $pkg
			./script/go_download $DIR_SRC $PKG $URL $EXC &
		done
		wait
		result "downloading" "ok"

		# build them..
		for pkg in $DIR_CFG/*; do
			[[ ! -f $pkg ]] && continue
			PKG=${pkg##*_}

			# clear pkg.-specific vars.
			CMD_POST=
			PATCH=

			CFL=
			LFL=
			. $pkg
			CFL="-pipe -fomit-frame-pointer -O2 $CFL"
			LFL="-pipe -s"

			go_patch
			go_configure
			go_build
			go_install
			result $PKG "ok"
		done
		cd $DIR_TOP

		status "MinGW" "postprocessing"
		##[[ -d $DIR_BLD/include ]] && mv $DIR_BLD/include $DIR_BLD/${ARCH}-w64-mingw32
		##[[ -d $DIR_BLD/lib/gcc/${ARCH}-w64-mingw32/lib ]] && mv $DIR_BLD/lib/gcc/${ARCH}-w64-mingw32/lib/* $DIR_BLD/lib && rm -rf $DIR_BLD/lib/gcc/${ARCH}-w64-mingw32/lib
		#[[ -d $DIR_BLD/${ARCH}-w64-mingw32/bin ]] && rm -rf $DIR_BLD/${ARCH}-w64-mingw32/bin
		#[[ -d $DIR_BLD/${ARCH}-w64-mingw32/lib ]] && rm -rf $DIR_BLD/${ARCH}-w64-mingw32/lib
		[[ -d $DIR_BLD/share ]] && rm -rf $DIR_BLD/share
		##rm -f $DIR_BLD/bin/${ARCH}-w64-mingw32*.exe

		status "MinGW" "compress"
		[[ -d $DIR_BLD ]] && 7za a -m0=lzma2 -mx=9 -md=64m -ms=on -mmt ${0##*/}-$GCC_VER-$ARCH-`date +%Y%m%d`-`date +%H%M%S`.7z $DIR_BLD > $DIR_TOP/compress.log 2>&1

		result "MinGW" "ready"

		dt=$(($(date +%s) - $TIME_START))
		ds=$((dt % 60))
		dm=$(((dt / 60) % 60))
		dh=$((dt / 3600))
		result "Build time:" $(printf '%d:%02d:%02d' $dh $dm $ds)
		;;
esac
